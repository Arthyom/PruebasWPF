<Window x:Class="WPFMultitoqueExperimental.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPFMultitoqueExperimental"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525" Loaded="Window_Loaded">

    <!-- 
        wpf es una tecnologia de graficos vectoriales, capaz de crear elementos en 2d, 3d y otorga un 
        grado de personalizacion muy profundo, las aplicaciones que wpf puede crear son basicamente
        de 2 tipos, las clasicas .exe y las bmap, aplicaciones para el navegador. 
    
        en wpf se pueden identificar 5 tipos principales de controles para usarse dentro de la GUI
        sin embargo los controles que el programador puede utilizar no se limitan unicamente a estos
    
            - botones
            - entradas
            - paneles de disenio
            - listas 
            - documentos 
        
        los elementos principales son los panels de disenio, que permiten definir en que forma 
        se han de mostrar los elementos en el formulario, asi pues existen 4 tipos de elementos de
        disenio 
            - grid, - dockpanel, - stackpanel, - canvas, - wraperpanel 
        su objetivo es el mismo sin embargo las unicas diferencias son la forma en que se visualizan
        y ordenan los elementos internos
    -->

    <!--
        en wpf se puede trabajar mediante el xaml o bien mediante el codigo de c# 
        esto permite a los desarrolladores o bien diseniadores separar la parte estetica de la parte
        logica 
        
        acontinuacion se utilizaran diversos controles de disenio para mostrar sus doferencias 
    -->


    <!-- teoricamente al canvas se le debe indicar su posicion absoluta 
    
    <Canvas Width="200" Height="300">
        <TextBlock Name="txtA" Background="Blue"  Width="100" Height="100" Margin="0,0,417,219"
                   HorizontalAlignment="Right">
            esta es una area de texto
        </TextBlock>
        
        <TextBox Name="textb" Background="Red" Width="50" Height="50" Margin="200,10" HorizontalAlignment="Center" VerticalAlignment="Bottom">
        </TextBox>
    </Canvas>
   -->

    <!-- los docpanel permite usar posiciones relativas, la propiedad margin no tiene efecto >
    <DockPanel >
        <TextBox Width="100" Height="100" Background="Red" HorizontalAlignment="Center" VerticalAlignment="Bottom"></TextBox>
        <TextBox Width="100" Height="100" Background="Blue" Margin ="0,0"></TextBox>
        <TextBox Width="100" Height="100" Background="Blue"  VerticalAlignment="Bottom" HorizontalAlignment="Right"></TextBox>
        
    </DockPanel>
    -->

    <!-- los elementos stakc panel permiten crear una agrupacion en forma de pila ya sea horizontal o verticalemte
         la visualizacion de  los elementos dependen unicamente del orden en que hallan sido agregados 
    <StackPanel HorizontalAlignment="Right">
        <TextBox Background="Red" Height="100" Width="100"></TextBox>
        <TextBox Background="Blue" Height="100" Width="100"></TextBox>
        <TextBox Background="Green" Height="100" Width="100" VerticalAlignment="Top"></TextBox>
    </StackPanel>
    -->

    <!-- el grid representa una tabla, semejante a las del html, cuyas celdas pueden contener uno 
         o varios ellementos del formulario tambien pueden ser fusionadas o divididas, los elemtos primarios 
         no son sensibles al margin, es decir su posicin es absoluta -->
    <Grid Name="grid" Height="200" Width="300">
        <TextBlock Background="red" Height="100" Width="100"   HorizontalAlignment="Left" ></TextBlock>
        <TextBlock Background="Blue" Height="100" Width="100"  HorizontalAlignment="Center"></TextBlock>
        <TextBlock Background="green" Height="100" Width="100" HorizontalAlignment="Right" ></TextBlock>

        <!-- el xaml permite crear objetos o controles y asignarles un evento de una forma simple
             la definicion del objeto se puede llevar acabo mediante el xaml, mientras que la parte
             logica, la programacion, puede hacerse por separado en el archivo de c# 
        -->
        <Button Background="Pink" Width="50" Height="50" VerticalAlignment="Bottom" Click="myClick">
            btn1
        </Button>

        <!--
            continuado con el uso del xmal, se debe hablar de la simplificacion que realiza y permite 
            al crear y declarar diversos elementos de una forma sumamente sencialla, declararemos una 
            caja de lista y agregaremos elementos mediante sus propiedades principales 
        -->
        <ListBox Name="lista" Width="50" Height="50" >
            <ListBox.Items>
                <ListBoxItem>item1</ListBoxItem>
                <ListBoxItem>item2</ListBoxItem>
                <ListBoxItem>item3</ListBoxItem>
            </ListBox.Items>
        </ListBox>


        <!-- acontinuacion se usaran algunas otras erramienteas del wpf -->
        <Label Background="red" Width="100" Height="20" VerticalAlignment="Top" Foreground="Blue">esta es una etiqueta</Label>
        <StatusBar Height="30" Margin="0,170,10,0" Background="Orange" Visibility="Visible">estado de la barra</StatusBar>
        <Button VerticalAlignment="Top" Height="100" Width="100" Visibility="Visible" FlowDirection="LeftToRight" Background="Red" Click="Button_Click" 
                RenderTransformOrigin="0.2, 34"
                >
            hola k ase 
        </Button>
    </Grid>
</Window>
